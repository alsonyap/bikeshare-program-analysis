library(dplyr)
library(forecast)
tripdata <- read.csv("./tripdata.csv")
sf <- c("South Van Ness at Market", "Market at 10th", "San Francisco City Hall",
"Golden Gate at Polk",
"Civic Center BART (7th at Market)", "Powell Street BART",
"Powell at Post (Union Square)", "5th at Howard", "Market at 4th", "Post at Kearny",
"Commercial at Montgomery", "Washington at Kearny", "Grant Avenue at Columbus Avenue",
"Embarcadero at Sansome", "Embarcadero at Vallejo", "Broadway St at Battery St",
"Davis at Jackson", "Clay at Battery", "Harry Bridges Plaza (Ferry Building)",
"Steuart at Market", "Beale at Market", "Mechanics Plaza (Market at Battery)",
"Embarcadero at Folsom", "Temporary Transbay Terminal (Howard at Beale)",
"Market at Sansome", "Spear at Folsom", "Howard at 2nd", "Embarcadero at Bryant",
"Yerba Buena Center of the Arts (3rd @ Howard)", "2nd at Folsom", "2nd at South Park",
"2nd at Townsend", "San Francisco Caltrain (Townsend at 4th)", "Townsend at 7th",
"San Francisco Caltrain 2 (330 Townsend)")
### Create 2 columns that tag the start and end stations on whether they are SF stations ###
tripdata$go <- ifelse(tripdata$Start.Station %in% sf, "SF", "NotSF")
tripdata$back <- ifelse(tripdata$End.Station %in% sf, "SF", "NotSF")
tripdata$goback <- paste(tripdata$go, tripdata$back, sep = " to ")
### Group up by the *goback* variable, before tallying the results up and ordering
tripdata %>% group_by(goback) %>% tally() %>% arrange(desc(n))
tripdata <- filter(tripdata, goback == 'SF to SF')
### Also to remove the tagged columns that were added as they are no longer required ###
tripdata <- tripdata[,-c(12,13,14)]
### Convert the Start.Date and End.Date columns into Date-time class ###
StartDate <- strptime(tripdata$Start.Date, "%m/%d/%Y %H:%M")
tripdata$Start.Date <- as.POSIXct(StartDate)
EndDate <- strptime(tripdata$End.Date, "%m/%d/%Y %H:%M")
tripdata$End.Date <- as.POSIXct(EndDate)
### Remove the unnecessary stored values ###
remove(StartDate,EndDate)
### Creates a copy of the original dataset ###
original <- tripdata
### Creates several useful columns (breakdown start/end date by Month, Day, Day of Week for analysis ###
tripdata <- mutate(tripdata, sdate = date(Start.Date), smonth = month(Start.Date,label = TRUE), sday = day(Start.Date), swday = wday(Start.Date,label = TRUE), shr = hour(Start.Date), edate = date(Start.Date), emonth = month(End.Date,label = TRUE), eday = day(End.Date), ewday = wday(End.Date,label = TRUE), ehr = hour(End.Date))
### To turn the Start.Date and End.Date into character format to avoid conflicting issues in tallying ###
tripdata$Start.Date <- as.character(tripdata$Start.Date)
tripdata$End.Date <- as.character(tripdata$End.Date)
### Tally up the number of trips for certain weekday ###
cwd <- ddply(tripdata, .(swday), tally)
cwd$wkday <- ifelse(cwd$swday %in% c("Mon","Tues","Wed","Thurs","Fri"), "Weekday","Weekend")
ggplot(cwd, aes(x = swday, y = n, fill = wkday)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week", x = "Days of Week", y = "Count")
cwdrider <- ddply(tripdata, .(swday,Subscriber.Type), tally)
ggplot(cwdrider, aes(x = swday, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week by Subscriber Type", x = "Days of Week", y = "Count")
### Just some cleaning up to do ###
remove(cwd,cwdrider)
###
hrrider <- ddply(tripdata, .(shr,Subscriber.Type), tally)
ggplot(hrrider, aes(x = shr, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over time of day by Subscriber Type", x = "Time of day (hr)", y = "Count")
whrider <- ddply(tripdata, .(shr,swday,Subscriber.Type), tally)
ggplot(whrider, aes(x = shr, y = n, fill = Subscriber.Type)) + facet_grid(. ~ swday) + geom_bar(stat='identity') + labs(title = "Ridership over WDay over Time by Subscriber Type", x = "Time", y = "Count")
### Some cleaning up as usual ###
remove(hrrider,whrider)
### Convert the initial start date back to POSICXlt class, and renamed it ###
tripdata$Start.DatewTime <- strptime(tripdata$Start.Date, "%Y-%m-%d %H:%M:%S")
tripdata$End.DatewTime <- strptime(tripdata$End.Date, "%Y-%m-%d %H:%M:%S")
### Extracted the date out and turned into character class ###
tripdata$Start.Date <- as.character(date(tripdata$Start.DatewTime))
tripdata$End.Date <- as.character(date(tripdata$End.DatewTime))
### Convert the DateWTime back to character so that we can tally w/o issues ###
tripdata$Start.DatewTime <- as.character(tripdata$Start.DatewTime)
tripdata$End.DatewTime <- as.character(tripdata$End.DatewTime)
### To add columns for holidays and weekends ###
tripdata <- mutate(tripdata, wkend = (swday %in% c("Sat","Sun")),
hol = (Start.Date %in% c("2014-05-11","2014-05-26","2014-06-15",
"2014-07-04")))
### Tally up the number of trips by start date ###
tripdate <- ddply(tripdata, .(Start.Date, wkend, hol), tally)
### Convert into date format
tripdate$Start.Date <- date(tripdate$Start.Date)
### Plot the graph with red lines for weekends, blue lines for holidays
ggplot(tripdate, aes(Start.Date, n)) + geom_line() + geom_area(aes(y = wkend*max(n)), fill ="red", alpha = 0.30) + geom_area(aes(y = hol*max(n)), fill = "blue", alpha = 0.30) +
labs(title = "No. of trips from Mar - Aug", x = "Date", y = "Count") + theme_minimal()
### General cleaning ###
remove(tripdate)
###
startpaths <- ddply(tripdata, .(Start.Station), tally) %>% arrange(desc(n))
head(startpaths)
endpaths <- ddply(tripdata, .(End.Station), tally) %>% arrange(desc(n))
head(endpaths)
startdata <- tripdata[tripdata$Start.Station %in% startpaths$Start.Station[1:6],] %>%
ddply(.(Start.Station,shr, wkend), tally)
startdata$wkend <- ifelse(startdata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(startdata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ Start.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
enddata <- tripdata[tripdata$End.Station %in% endpaths$End.Station[1:6],] %>%
ddply(.(End.Station,shr, wkend), tally)
enddata$wkend <- ifelse(enddata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(enddata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ End.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
### General cleaning up as usual ###
remove(startdata,enddata,startpaths,endpaths)
### Extracts out the data that start or end at San Francisco Caltrain (Townsend at 4th) ###
sfct <- tripdata[tripdata$Start.Station %in% "San Francisco Caltrain (Townsend at 4th)" | tripdata$End.Station %in% "San Francisco Caltrain (Townsend at 4th)",]
### Splits the data set into 2, one that starts at that station, another one that ends at the station ###
startdt <- select(sfct, Start.Station, Start.DatewTime) %>% filter(Start.Station == "San Francisco Caltrain (Townsend at 4th)")
enddt <- select(sfct, End.Station, End.DatewTime) %>% filter(End.Station == "San Francisco Caltrain (Townsend at 4th)")
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime), "%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime), "%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
### How the data looks like for head and tail ###
head(combdt)
tail(combdt)
### Plot the data to see the distribution of net change in number of bikes across date and hour ###
ggplot(combdt, aes(x = datetime, y = Net)) + geom_line() + labs(title = "Net change of bikes over date", x = "Net change of bikes", y = "Date")
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
plot(fitHW, lwd = 2, col = "blue", main = "Holt Winter Additive")
### Fitted line is in red ###
fa <- forecast(fitHW, 14)
plot(fa, lwd = 2, col = "blue", main = "HW Additive Prediction")
accuracy(fa)
Box.test(residuals(fitHW), lag = 7, type = "Ljung")
remove(startdt, enddt, sfct)
### Create an empty data frame to store all the values ###
final <- data.frame()
for (i in 1:length(sf)) {
station <- sf[i]
dt <- tripdata[tripdata$Start.Station == station | tripdata$End.Station == station,]
startdt <- select(dt, Start.Station, Start.DatewTime) %>% filter(Start.Station == station)
enddt <- select(dt, End.Station, End.DatewTime) %>% filter(End.Station == station)
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime),"%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime),"%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
### Predict the values for the next 14 days ###
fa <- forecast(fitHW, 14)
predicted <- as.character(as.numeric(fa$mean))
datetime <- seq(from = as.POSIXct("2014-09-01"), to = as.POSIXct("2014-09-14"), by = "day")
datetime <- as.character(datetime)
station_name <- rep(station, 14)
overall <- data.frame(cbind(station_name, datetime, predicted))
final <- rbind(final,overall)
}
final$station_name <- as.character(final$station_name)
final$datetime <- as.character(final$datetime)
final$predicted <- as.numeric(as.character(final$predicted))
write.csv(final, file = "./final.csv")
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(forecast)
tripdata <- read.csv("./tripdata.csv")
sf <- c("South Van Ness at Market", "Market at 10th", "San Francisco City Hall",
"Golden Gate at Polk",
"Civic Center BART (7th at Market)", "Powell Street BART",
"Powell at Post (Union Square)", "5th at Howard", "Market at 4th", "Post at Kearny",
"Commercial at Montgomery", "Washington at Kearny", "Grant Avenue at Columbus Avenue",
"Embarcadero at Sansome", "Embarcadero at Vallejo", "Broadway St at Battery St",
"Davis at Jackson", "Clay at Battery", "Harry Bridges Plaza (Ferry Building)",
"Steuart at Market", "Beale at Market", "Mechanics Plaza (Market at Battery)",
"Embarcadero at Folsom", "Temporary Transbay Terminal (Howard at Beale)",
"Market at Sansome", "Spear at Folsom", "Howard at 2nd", "Embarcadero at Bryant",
"Yerba Buena Center of the Arts (3rd @ Howard)", "2nd at Folsom", "2nd at South Park",
"2nd at Townsend", "San Francisco Caltrain (Townsend at 4th)", "Townsend at 7th",
"San Francisco Caltrain 2 (330 Townsend)")
### Create 2 columns that tag the start and end stations on whether they are SF stations ###
tripdata$go <- ifelse(tripdata$Start.Station %in% sf, "SF", "NotSF")
tripdata$back <- ifelse(tripdata$End.Station %in% sf, "SF", "NotSF")
tripdata$goback <- paste(tripdata$go, tripdata$back, sep = " to ")
### Group up by the *goback* variable, before tallying the results up and ordering
tripdata %>% group_by(goback) %>% tally() %>% arrange(desc(n))
tripdata <- filter(tripdata, goback == 'SF to SF')
### Also to remove the tagged columns that were added as they are no longer required ###
tripdata <- tripdata[,-c(12,13,14)]
### Convert the Start.Date and End.Date columns into Date-time class ###
StartDate <- strptime(tripdata$Start.Date, "%m/%d/%Y %H:%M")
tripdata$Start.Date <- as.POSIXct(StartDate)
EndDate <- strptime(tripdata$End.Date, "%m/%d/%Y %H:%M")
tripdata$End.Date <- as.POSIXct(EndDate)
### Remove the unnecessary stored values ###
remove(StartDate,EndDate)
### Creates a copy of the original dataset ###
original <- tripdata
### Creates several useful columns (breakdown start/end date by Month, Day, Day of Week for analysis ###
tripdata <- mutate(tripdata, sdate = date(Start.Date), smonth = month(Start.Date,label = TRUE), sday = day(Start.Date), swday = wday(Start.Date,label = TRUE), shr = hour(Start.Date), edate = date(Start.Date), emonth = month(End.Date,label = TRUE), eday = day(End.Date), ewday = wday(End.Date,label = TRUE), ehr = hour(End.Date))
### To turn the Start.Date and End.Date into character format to avoid conflicting issues in tallying ###
tripdata$Start.Date <- as.character(tripdata$Start.Date)
tripdata$End.Date <- as.character(tripdata$End.Date)
### Tally up the number of trips for certain weekday ###
cwd <- ddply(tripdata, .(swday), tally)
cwd$wkday <- ifelse(cwd$swday %in% c("Mon","Tues","Wed","Thurs","Fri"), "Weekday","Weekend")
ggplot(cwd, aes(x = swday, y = n, fill = wkday)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week", x = "Days of Week", y = "Count")
cwdrider <- ddply(tripdata, .(swday,Subscriber.Type), tally)
ggplot(cwdrider, aes(x = swday, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week by Subscriber Type", x = "Days of Week", y = "Count")
### Just some cleaning up to do ###
remove(cwd,cwdrider)
###
hrrider <- ddply(tripdata, .(shr,Subscriber.Type), tally)
ggplot(hrrider, aes(x = shr, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over time of day by Subscriber Type", x = "Time of day (hr)", y = "Count")
whrider <- ddply(tripdata, .(shr,swday,Subscriber.Type), tally)
ggplot(whrider, aes(x = shr, y = n, fill = Subscriber.Type)) + facet_grid(. ~ swday) + geom_bar(stat='identity') + labs(title = "Ridership over WDay over Time by Subscriber Type", x = "Time", y = "Count")
### Some cleaning up as usual ###
remove(hrrider,whrider)
### Convert the initial start date back to POSICXlt class, and renamed it ###
tripdata$Start.DatewTime <- strptime(tripdata$Start.Date, "%Y-%m-%d %H:%M:%S")
tripdata$End.DatewTime <- strptime(tripdata$End.Date, "%Y-%m-%d %H:%M:%S")
### Extracted the date out and turned into character class ###
tripdata$Start.Date <- as.character(date(tripdata$Start.DatewTime))
tripdata$End.Date <- as.character(date(tripdata$End.DatewTime))
### Convert the DateWTime back to character so that we can tally w/o issues ###
tripdata$Start.DatewTime <- as.character(tripdata$Start.DatewTime)
tripdata$End.DatewTime <- as.character(tripdata$End.DatewTime)
### To add columns for holidays and weekends ###
tripdata <- mutate(tripdata, wkend = (swday %in% c("Sat","Sun")),
hol = (Start.Date %in% c("2014-05-11","2014-05-26","2014-06-15",
"2014-07-04")))
### Tally up the number of trips by start date ###
tripdate <- ddply(tripdata, .(Start.Date, wkend, hol), tally)
### Convert into date format
tripdate$Start.Date <- date(tripdate$Start.Date)
### Plot the graph with red lines for weekends, blue lines for holidays
ggplot(tripdate, aes(Start.Date, n)) + geom_line() + geom_area(aes(y = wkend*max(n)), fill ="red", alpha = 0.30) + geom_area(aes(y = hol*max(n)), fill = "blue", alpha = 0.30) +
labs(title = "No. of trips from Mar - Aug", x = "Date", y = "Count") + theme_minimal()
### General cleaning ###
remove(tripdate)
###
startpaths <- ddply(tripdata, .(Start.Station), tally) %>% arrange(desc(n))
head(startpaths)
endpaths <- ddply(tripdata, .(End.Station), tally) %>% arrange(desc(n))
head(endpaths)
startdata <- tripdata[tripdata$Start.Station %in% startpaths$Start.Station[1:6],] %>%
ddply(.(Start.Station,shr, wkend), tally)
startdata$wkend <- ifelse(startdata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(startdata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ Start.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
enddata <- tripdata[tripdata$End.Station %in% endpaths$End.Station[1:6],] %>%
ddply(.(End.Station,shr, wkend), tally)
enddata$wkend <- ifelse(enddata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(enddata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ End.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
### General cleaning up as usual ###
remove(startdata,enddata,startpaths,endpaths)
### Extracts out the data that start or end at San Francisco Caltrain (Townsend at 4th) ###
sfct <- tripdata[tripdata$Start.Station %in% "San Francisco Caltrain (Townsend at 4th)" | tripdata$End.Station %in% "San Francisco Caltrain (Townsend at 4th)",]
### Splits the data set into 2, one that starts at that station, another one that ends at the station ###
startdt <- select(sfct, Start.Station, Start.DatewTime) %>% filter(Start.Station == "San Francisco Caltrain (Townsend at 4th)")
enddt <- select(sfct, End.Station, End.DatewTime) %>% filter(End.Station == "San Francisco Caltrain (Townsend at 4th)")
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime), "%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime), "%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
### How the data looks like for head and tail ###
head(combdt)
tail(combdt)
### Plot the data to see the distribution of net change in number of bikes across date and hour ###
ggplot(combdt, aes(x = datetime, y = Net)) + geom_line() + labs(title = "Net change of bikes over date", x = "Net change of bikes", y = "Date")
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
plot(fitHW, lwd = 2, col = "blue", main = "Holt Winter Additive")
### Fitted line is in red ###
fa <- forecast(fitHW, 14)
plot(fa, lwd = 2, col = "blue", main = "HW Additive Prediction")
accuracy(fa)
Box.test(residuals(fitHW), lag = 7, type = "Ljung")
remove(startdt, enddt, sfct)
### Create an empty data frame to store all the values ###
final <- data.frame()
for (i in 1:length(sf)) {
station <- sf[i]
dt <- tripdata[tripdata$Start.Station == station | tripdata$End.Station == station,]
startdt <- select(dt, Start.Station, Start.DatewTime) %>% filter(Start.Station == station)
enddt <- select(dt, End.Station, End.DatewTime) %>% filter(End.Station == station)
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime),"%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime),"%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
### Predict the values for the next 14 days ###
fa <- forecast(fitHW, 14)
predicted <- as.character(as.numeric(fa$mean))
datetime <- seq(from = as.POSIXct("2014-09-01"), to = as.POSIXct("2014-09-14"), by = "day")
datetime <- as.character(datetime)
station_name <- rep(station, 14)
overall <- data.frame(cbind(station_name, datetime, predicted))
final <- rbind(final,overall)
}
final$station_name <- as.character(final$station_name)
final$datetime <- as.character(final$datetime)
final$predicted <- as.numeric(as.character(final$predicted))
write.csv(final, file = "./final.csv")
knit_with_parameters('~/GitHub/Bike Sharing Program Analysis/SFBABikeShare Analysis.Rmd')
unlink('SFBABikeShare Analysis_cache', recursive = TRUE)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(forecast)
tripdata <- read.csv("./tripdata.csv")
sf <- c("South Van Ness at Market", "Market at 10th", "San Francisco City Hall",
"Golden Gate at Polk",
"Civic Center BART (7th at Market)", "Powell Street BART",
"Powell at Post (Union Square)", "5th at Howard", "Market at 4th", "Post at Kearny",
"Commercial at Montgomery", "Washington at Kearny", "Grant Avenue at Columbus Avenue",
"Embarcadero at Sansome", "Embarcadero at Vallejo", "Broadway St at Battery St",
"Davis at Jackson", "Clay at Battery", "Harry Bridges Plaza (Ferry Building)",
"Steuart at Market", "Beale at Market", "Mechanics Plaza (Market at Battery)",
"Embarcadero at Folsom", "Temporary Transbay Terminal (Howard at Beale)",
"Market at Sansome", "Spear at Folsom", "Howard at 2nd", "Embarcadero at Bryant",
"Yerba Buena Center of the Arts (3rd @ Howard)", "2nd at Folsom", "2nd at South Park",
"2nd at Townsend", "San Francisco Caltrain (Townsend at 4th)", "Townsend at 7th",
"San Francisco Caltrain 2 (330 Townsend)")
### Create 2 columns that tag the start and end stations on whether they are SF stations ###
tripdata$go <- ifelse(tripdata$Start.Station %in% sf, "SF", "NotSF")
tripdata$back <- ifelse(tripdata$End.Station %in% sf, "SF", "NotSF")
tripdata$goback <- paste(tripdata$go, tripdata$back, sep = " to ")
### Group up by the *goback* variable, before tallying the results up and ordering
tripdata %>% group_by(goback) %>% tally() %>% arrange(desc(n))
tripdata <- filter(tripdata, goback == 'SF to SF')
### Also to remove the tagged columns that were added as they are no longer required ###
tripdata <- tripdata[,-c(12,13,14)]
### Convert the Start.Date and End.Date columns into Date-time class ###
StartDate <- strptime(tripdata$Start.Date, "%m/%d/%Y %H:%M")
tripdata$Start.Date <- as.POSIXct(StartDate)
EndDate <- strptime(tripdata$End.Date, "%m/%d/%Y %H:%M")
tripdata$End.Date <- as.POSIXct(EndDate)
### Remove the unnecessary stored values ###
remove(StartDate,EndDate)
### Creates a copy of the original dataset ###
original <- tripdata
### Creates several useful columns (breakdown start/end date by Month, Day, Day of Week for analysis ###
tripdata <- mutate(tripdata, sdate = date(Start.Date), smonth = month(Start.Date,label = TRUE), sday = day(Start.Date), swday = wday(Start.Date,label = TRUE), shr = hour(Start.Date), edate = date(Start.Date), emonth = month(End.Date,label = TRUE), eday = day(End.Date), ewday = wday(End.Date,label = TRUE), ehr = hour(End.Date))
### To turn the Start.Date and End.Date into character format to avoid conflicting issues in tallying ###
tripdata$Start.Date <- as.character(tripdata$Start.Date)
tripdata$End.Date <- as.character(tripdata$End.Date)
### Tally up the number of trips for certain weekday ###
cwd <- ddply(tripdata, .(swday), tally)
cwd$wkday <- ifelse(cwd$swday %in% c("Mon","Tues","Wed","Thurs","Fri"), "Weekday","Weekend")
ggplot(cwd, aes(x = swday, y = n, fill = wkday)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week", x = "Days of Week", y = "Count")
cwdrider <- ddply(tripdata, .(swday,Subscriber.Type), tally)
ggplot(cwdrider, aes(x = swday, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over days of week by Subscriber Type", x = "Days of Week", y = "Count")
### Just some cleaning up to do ###
remove(cwd,cwdrider)
###
hrrider <- ddply(tripdata, .(shr,Subscriber.Type), tally)
ggplot(hrrider, aes(x = shr, y = n, fill = Subscriber.Type)) + geom_bar(stat='identity') + labs(title = "Ridership over time of day by Subscriber Type", x = "Time of day (hr)", y = "Count")
whrider <- ddply(tripdata, .(shr,swday,Subscriber.Type), tally)
ggplot(whrider, aes(x = shr, y = n, fill = Subscriber.Type)) + facet_grid(. ~ swday) + geom_bar(stat='identity') + labs(title = "Ridership over WDay over Time by Subscriber Type", x = "Time", y = "Count")
### Some cleaning up as usual ###
remove(hrrider,whrider)
### Convert the initial start date back to POSICXlt class, and renamed it ###
tripdata$Start.DatewTime <- strptime(tripdata$Start.Date, "%Y-%m-%d %H:%M:%S")
tripdata$End.DatewTime <- strptime(tripdata$End.Date, "%Y-%m-%d %H:%M:%S")
### Extracted the date out and turned into character class ###
tripdata$Start.Date <- as.character(date(tripdata$Start.DatewTime))
tripdata$End.Date <- as.character(date(tripdata$End.DatewTime))
### Convert the DateWTime back to character so that we can tally w/o issues ###
tripdata$Start.DatewTime <- as.character(tripdata$Start.DatewTime)
tripdata$End.DatewTime <- as.character(tripdata$End.DatewTime)
### To add columns for holidays and weekends ###
tripdata <- mutate(tripdata, wkend = (swday %in% c("Sat","Sun")),
hol = (Start.Date %in% c("2014-05-11","2014-05-26","2014-06-15",
"2014-07-04")))
### Tally up the number of trips by start date ###
tripdate <- ddply(tripdata, .(Start.Date, wkend, hol), tally)
### Convert into date format
tripdate$Start.Date <- date(tripdate$Start.Date)
### Plot the graph with red lines for weekends, blue lines for holidays
ggplot(tripdate, aes(Start.Date, n)) + geom_line() + geom_area(aes(y = wkend*max(n)), fill ="red", alpha = 0.30) + geom_area(aes(y = hol*max(n)), fill = "blue", alpha = 0.30) +
labs(title = "No. of trips from Mar - Aug", x = "Date", y = "Count") + theme_minimal()
### General cleaning ###
remove(tripdate)
###
startpaths <- ddply(tripdata, .(Start.Station), tally) %>% arrange(desc(n))
head(startpaths)
endpaths <- ddply(tripdata, .(End.Station), tally) %>% arrange(desc(n))
head(endpaths)
startdata <- tripdata[tripdata$Start.Station %in% startpaths$Start.Station[1:6],] %>%
ddply(.(Start.Station,shr, wkend), tally)
startdata$wkend <- ifelse(startdata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(startdata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ Start.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
enddata <- tripdata[tripdata$End.Station %in% endpaths$End.Station[1:6],] %>%
ddply(.(End.Station,shr, wkend), tally)
enddata$wkend <- ifelse(enddata$wkend == TRUE, 'Weekend', 'Weekday')
ggplot(enddata, aes(x = shr, y = n, colour = wkend)) + facet_wrap( ~ End.Station, ncol = 2) + geom_line(aes(group = wkend)) + geom_point(aes(group = wkend)) + labs(title = "Distribution of trips starting from each station across time by weekday/weekend", x = "Time (hr)", y = "Count")
### General cleaning up as usual ###
remove(startdata,enddata,startpaths,endpaths)
### Extracts out the data that start or end at San Francisco Caltrain (Townsend at 4th) ###
sfct <- tripdata[tripdata$Start.Station %in% "San Francisco Caltrain (Townsend at 4th)" | tripdata$End.Station %in% "San Francisco Caltrain (Townsend at 4th)",]
### Splits the data set into 2, one that starts at that station, another one that ends at the station ###
startdt <- select(sfct, Start.Station, Start.DatewTime) %>% filter(Start.Station == "San Francisco Caltrain (Townsend at 4th)")
enddt <- select(sfct, End.Station, End.DatewTime) %>% filter(End.Station == "San Francisco Caltrain (Townsend at 4th)")
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime), "%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime), "%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
### How the data looks like for head and tail ###
head(combdt)
tail(combdt)
### Plot the data to see the distribution of net change in number of bikes across date and hour ###
ggplot(combdt, aes(x = datetime, y = Net)) + geom_line() + labs(title = "Net change of bikes over date", x = "Net change of bikes", y = "Date")
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
plot(fitHW, lwd = 2, col = "blue", main = "Holt Winter Additive")
### Fitted line is in red ###
fa <- forecast(fitHW, 14)
plot(fa, lwd = 2, col = "blue", main = "HW Additive Prediction")
accuracy(fa)
Box.test(residuals(fitHW), lag = 7, type = "Ljung")
remove(startdt, enddt, sfct)
### Create an empty data frame to store all the values ###
final <- data.frame()
for (i in 1:length(sf)) {
station <- sf[i]
dt <- tripdata[tripdata$Start.Station == station | tripdata$End.Station == station,]
startdt <- select(dt, Start.Station, Start.DatewTime) %>% filter(Start.Station == station)
enddt <- select(dt, End.Station, End.DatewTime) %>% filter(End.Station == station)
### Extracts only the date and hour out ###
startdt$Start.DatewTime <- as.POSIXct(format(as.POSIXct(startdt$Start.DatewTime),"%Y-%m-%d"))
enddt$End.DatewTime <- as.POSIXct(format(as.POSIXct(enddt$End.DatewTime),"%Y-%m-%d"))
### Aggregate the number of trips by date and hour ###
startdt <- aggregate(Start.Station ~ Start.DatewTime, data = startdt, FUN = length)
enddt <- aggregate(End.Station ~ End.DatewTime, data = enddt, FUN = length)
### Create a column of sequential date and time from 1st Mar 14 to 31st Aug 14 ###
datetime <- seq(from = as.POSIXct("2014-03-01"), to = as.POSIXct("2014-08-31"), by = "day")
datetime <- data.frame(datetime)
### Merge all the subsequent columns together, replace NA values with 0 ###
combdt <- merge(datetime, startdt, by.x = "datetime", by.y = "Start.DatewTime", all.x = TRUE)
combdt$Start.Station[is.na(combdt$Start.Station)] <- 0
combdt <- merge(combdt, enddt, by.x = "datetime", by.y = "End.DatewTime", all.x = TRUE)
combdt$End.Station[is.na(combdt$End.Station)] <- 0
### The start.station column signifies number of bikes leaving the station, the end.station column signifies the number of bikes entering the station. To get the net change, we form a new column of Net = End.Station - Start.Station ###
combdt <- mutate(combdt, Net = End.Station - Start.Station)
combdt <- select(combdt, datetime, Net)
combdts <- ts(combdt$Net, frequency = 7, start = c(1,3))
### Fit an additive Holt Winter's Additive model ###
fitHW <- HoltWinters(combdts, seasonal = "additive")
### Predict the values for the next 14 days ###
fa <- forecast(fitHW, 14)
predicted <- as.character(as.numeric(fa$mean))
datetime <- seq(from = as.POSIXct("2014-09-01"), to = as.POSIXct("2014-09-14"), by = "day")
datetime <- as.character(datetime)
station_name <- rep(station, 14)
overall <- data.frame(cbind(station_name, datetime, predicted))
final <- rbind(final,overall)
}
final$station_name <- as.character(final$station_name)
final$datetime <- as.character(final$datetime)
final$predicted <- as.numeric(as.character(final$predicted))
write.csv(final, file = "./final.csv")
